function result= DIVA(model)
v2struct(model) %unpack input params

% ----------------------------------------------------------------------------
% DESCRIPTION
%	this script does most of the work for training DIVA. 
%	it creates a result struct containing accuracy over trials/blocks, as
%	well as a log of the the weights learned by diva.
% 
% INPUT ARGUMENTS:
% 	model is a struct that is assumed to contain:
% 		model.numblocks	  		= 160; % number of weight updates
% 		model.numinitials		= 50; % number of randomized divas
% 		model.weightrange		= .5; % range of initial weight values
% 		model.numhiddenunits 	= 2; % # hidden units
% 		model.learningrate   	= .15; % learning rate for gradient descent
% 		model.betavalue	  		= 2.5; % beta parameter for focusing
%	   	model.outputrule = activation rule for output units. {"linear", " sigmoid"}.
% 
%		model.input is an [eg,dimension] matrix of training exemplars
%		model.labels is an integer vector of class labels for each input
% ----------------------------------------------------------------------------

%   these are optional editables, currently set at default values
	weightcenter = 0; % mean value of weights
	
	% convert all targets to [0 1] for consistency with sigmoid
	targets = globalscale(inputs,[0 1]);
% ----------------------------------------------------------------------------

result=struct; %initialize the results structure

% initializing some useful variables
numfeatures   = size(inputs,2);
numstimuli    = size(inputs,1);
num_inftrials = size(inftrials,1); 
numcategories = length(unique(labels));
numupdates    = numblocks*numstimuli;

% set up storage for model performance
training          = zeros(numupdates,numinitials);
inferencetest     = zeros(num_inftrials,numinitials);

%   Initializing diva and running the simulation
%   ------------------------------------------------------ % 
for modelnumber = 1:numinitials
	
	%  generating initial weights
	[inweights,outweights] = getweights(numfeatures, numhiddenunits, ...
		numcategories, weightrange, weightcenter);

	%  generating full presentation order
	presentationorder = getpresentationorder(numstimuli,numblocks);
	
	%   iterate over each trial in the presentation order
	%   ------------------------------------------------------ % 
	for trialnumber = 1:numupdates
		currentinput  =  inputs(presentationorder(trialnumber),:);
		currenttarget =  targets(presentationorder(trialnumber),:);
		currentclass  =  labels(presentationorder(trialnumber),:);
		
		%  ------------------- complete forward pass
		[initoutputactivations,hiddenactivation,hiddenactivation_raw,inputswithbias] = ...
			FORWARDPASS(inweights,outweights,currentinput,outputrule);
		
		%   --- conduct switch part of trial
		if currentclass == 1
			switchclass = 2;
			switchtarget = round(initoutputactivations(:,:,2));
			switchinput = switchtarget;
			switchinput(switchinput == 0) = -1;

		elseif currentclass == 2
			switchclass = 1;
			switchtarget = round(initoutputactivations(:,:,1));
			switchinput = switchtarget;
			switchinput(switchinput == 0) = -1;
		end

		[outputactivations,hiddenactivation,hiddenactivation_raw,inputswithbias] = ...
			FORWARDPASS(inweights,outweights,switchinput,outputrule);
		
		% --- compute classification probability
		p = responserule(outputactivations, switchtarget, betavalue);
		
		% Store classification accuracy
		training(trialnumber,modelnumber)=p(switchclass);

		%  ------------------- back propagate error to adjust weights
		classweights = outweights(:,:,currentclass);
		classactivation = outputactivations(:,:,currentclass);
		[outweights(:,:,currentclass), inweights] = BACKPROP(...
			classweights,inweights,classactivation,currenttarget,...
			hiddenactivation,hiddenactivation_raw,inputswithbias,learningrate);
	end
	
% --- run test phases
	% --- get inference test activations
	[inf_test_outs,inf_hid_act,inf_hid_raw,inf_inswbias] = ...
	 	FORWARDPASS(inweights,outweights,inftrials,outputrule);

	% --- init inference feature matrices 	
	inf_test_feats = zeros(size(inf_test_outs,1),2);
	inf_test_final = zeros(size(inf_test_outs,1),1);
	
	% --- identify target feature for given trial and fill matrix
	for idx = 1:size(inf_test_outs,1)
		inf_test_feats(idx,1) = inf_test_outs(idx,infrespfeat(idx),1);
		inf_test_feats(idx,2) = inf_test_outs(idx,infrespfeat(idx),2);
		inf_test_final(idx) = inf_test_feats(idx,infcategories(idx)+1);
	end 
	
	%[inf_test_outs(:,:,1) inf_test_outs(:,:,2)  infrespfeat inf_test_feats]
	inf_test_final = round(inf_test_final);
	inf_test_acc = inf_test_final == infcorrect;

% %	 ----------- END TEST PHASES
end


blockrows(mean(training,2),numstimuli)'
blockrows(mean(inf_test_acc,2),num_inftrials)'	
% store performance in the result struct
result.training=blockrows(mean(training,2),numstimuli)'; 
%result.inf_test=blockrows(inf_test_acc,num_inftrials)';
end
